{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/matrix-3d.ts","webpack:///./src/app.ts","webpack:///./src/points-3d.ts","webpack:///./src/glu-invert-matrix.ts","webpack:///./src/webgl.ts","webpack:///./src/points-3d-renderer.ts","webpack:///./src/simple-vertex-shader.glsl","webpack:///./src/z-buffer-fragment-shader.glsl"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","glu_invert_matrix_1","IDENTITY","Vector3D","[object Object]","x","y","z","w","this","v","len","Math","sqrt","Matrix3D","values","valueAt","Float32Array","row","column","multiply","radians","cos","sin","m2","col1","transformVector","col2","col3","col4","inv","gluInvertMatrix","toFloat32Array","Error","fromFloat32Array","f","map","options","near","far","left","right","top","bottom","width","height","depth","doubleNear","col","points_3d_1","webgl_1","points_3d_renderer_1","matrix_3d_1","simpleVertexShaderSrc","zBufferFragmentShaderSrc","Spaceship","orbitTheta","random","orbitThetaVelocity","distanceFromCenter","scale","shipTheta","shipThetaVelocity","window","addEventListener","canvas","document","createElement","body","appendChild","style","border","gl","getContext","program","GlProgram","super","transform","GlUniformMatrix3D","positionAttributeLocation","getAttribLocation","spaceshipRenderer","Points3DRenderer","leftHalf","Points3D","fromArray","concat","mirrorHorizontally","makeSpaceship","groundRenderer","pointsPerAxis","points","xPart","zPart","partInc","push","makeGround","rayRenderer","baseProjectionTransform","perspectiveProjection","spaceships","screenClick","latestScreenClick","onclick","e","offsetX","offsetY","console","log","cameraRotation","render","cameraTransform","rotateY","translate","viewTransform","inverse","projectionTransform","inverseProjectionTransform","screenPoint","screenPointInWorld","perspectiveDivide","cameraInWorld","ray","minus","start","segments","length","point","increment","normalize","times","plus","makeRay","viewport","enable","DEPTH_TEST","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","activate","setupForDrawing","set","draw","LINES","forEach","spaceship","baseTransform","rotateZ","update","requestAnimationFrame","array","result","arrIndex","combined","numPoints","pointArray","Array","det","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","msg","getShaderInfoLog","deleteShader","loc","vertexShaderSrc","fragmentShaderSrc","vertexShader","WebGLRenderingContext","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","useProgram","GlUniformBase","location","getUniformLocation","GlUniformVector","uniform4fv","GlUniformFloat","uniform1f","uniformMatrix4fv","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","FLOAT","vertexAttribPointer","primitiveType","TRIANGLES","count","drawArrays"],"mappings":"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","file":"app.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","import { gluInvertMatrix } from \"./glu-invert-matrix\";\n\ntype Column = 1|2|3|4;\ntype Row = 1|2|3|4;\n\n/**\n * A 4x4 matrix represented as\n * a two-dimensional array in\n * row-major order.\n */\ntype Matrix3DTuple = [\n  [number, number, number, number],\n  [number, number, number, number],\n  [number, number, number, number],\n  [number, number, number, number]\n];\n\ntype PerspectiveOptions = {\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n  near: number;\n  far: number;\n};\n\nconst IDENTITY: Matrix3DTuple = [\n  [1, 0, 0, 0],\n  [0, 1, 0, 0],\n  [0, 0, 1, 0],\n  [0, 0, 0, 1]\n];\n\n/** \n * A three-dimensional vector. Note that it actually has\n * four elements because we use a homogeneous coordinate\n * system.\n */\nexport class Vector3D {\n  constructor(readonly x: number, readonly y: number, readonly z: number, readonly w: number = 1.0) {\n  }\n\n  perspectiveDivide(): Vector3D {\n    const { x, y, z, w } = this;\n    return new Vector3D(x / w, y / w, z / w);\n  }\n\n  minus(v: Vector3D): Vector3D {\n    const { x, y, z, w } = this;\n    return new Vector3D(x - v.x, y - v.y, z - v.z, w);\n  }\n\n  plus(v: Vector3D): Vector3D {\n    const { x, y, z, w } = this;\n    return new Vector3D(x + v.x, y + v.y, z + v.z, w);\n  }\n\n  times(n: number): Vector3D {\n    const { x, y, z, w } = this;\n    return new Vector3D(x * n, y *n, z * n, w);\n  }\n\n  normalize(): Vector3D {\n    const { x, y, z, w } = this;\n\n    const len = Math.sqrt(x * x + y * y + z * z);\n    return new Vector3D(x / len, y / len, z / len, w);\n  }\n}\n\n/**\n * A three-dimensional matrix. Note that it ultimately represents a 4x4\n * matrix because we use homogeneous coordinates.\n */\nexport class Matrix3D {\n  constructor(readonly values: Matrix3DTuple = IDENTITY) {\n    this.valueAt = this.valueAt.bind(this);\n  }\n\n  /**\n   * Convert the matrix into a Float32Array in column-major order\n   * (the layout that GLSL expects).\n   */\n  toFloat32Array(): Float32Array {\n    const m = this.valueAt;\n    return new Float32Array([\n      m(1, 1), m(2, 1), m(3, 1), m(4, 1),\n      m(1, 2), m(2, 2), m(3, 2), m(4, 2),\n      m(1, 3), m(2, 3), m(3, 3), m(4, 3),\n      m(1, 4), m(2, 4), m(3, 4), m(4, 4),\n    ]);\n  }\n\n  /**\n   * Convert the given float array, in column-major order, to a\n   * matrix.\n   */\n  static fromFloat32Array(m: Float32Array): Matrix3D {\n    return new Matrix3D([\n      [m[0], m[4], m[8], m[12]],\n      [m[1], m[5], m[9], m[13]],\n      [m[2], m[6], m[10], m[14]],\n      [m[3], m[7], m[11], m[15]]\n    ]);\n  }\n\n  valueAt(row: Row, column: Column): number {\n    return this.values[row - 1][column - 1];\n  }\n\n  translate(v: Vector3D): Matrix3D;\n  translate(x: number, y: number, z: number): Matrix3D;\n\n  translate(x: Vector3D|number, y?: number, z?: number): Matrix3D {\n    z = x instanceof Vector3D ? x.z : z || 0;\n    y = x instanceof Vector3D ? x.y : y || 0;\n    x = x instanceof Vector3D ? x.x : x;\n\n    return this.multiply(new Matrix3D([\n      [1, 0, 0, x],\n      [0, 1, 0, y],\n      [0, 0, 1, z],\n      [0, 0, 0, 1]\n    ]));\n  }\n\n  scale(v: number) {\n    return this.multiply(new Matrix3D([\n      [v, 0, 0, 0],\n      [0, v, 0, 0],\n      [0, 0, v, 0],\n      [0, 0, 0, 1]\n    ]));\n  }\n\n  /** Rotate counter-clockwise around the X axis. */\n  rotateX(radians: number) {\n    // Deriving this requires the trigonometric identities for angle sums:\n    //\n    //   https://en.wikipedia.org/wiki/List_of_trigonometric_identities\n    //\n    // That said, I think an alternative approach is to think of rotation\n    // as transformation of basis vectors via matrix multiplication,\n    // which simplifies things conceptually.\n    const c = Math.cos(radians);\n    const s = Math.sin(radians);\n    return this.multiply(new Matrix3D([\n      [1,  0, 0, 0],\n      [0,  c, s, 0],\n      [0, -s, c, 0],\n      [0,  0, 0, 1]\n    ]));\n  }\n\n  /** Rotate counter-clockwise around the Y axis. */\n  rotateY(radians: number) {\n    const c = Math.cos(radians);\n    const s = Math.sin(radians);\n    return this.multiply(new Matrix3D([\n      [c, 0, -s, 0],\n      [0, 1,  0, 0],\n      [s, 0,  c, 0],\n      [0, 0,  0, 1]\n    ]));\n  }\n\n  /** Rotate counter-clockwise around the Z axis. */\n  rotateZ(radians: number) {\n    const c = Math.cos(radians);\n    const s = Math.sin(radians);\n    return this.multiply(new Matrix3D([\n      [c, -s, 0, 0],\n      [s,  c, 0, 0],\n      [0,  0, 1, 0],\n      [0,  0, 0, 1]\n    ]));\n  }\n\n  multiply(m2: Matrix3D): Matrix3D {\n    // Conceptualy, it's easiest to think of matrix multiplication\n    // as a transformation of a coordinate system's basis\n    // vectors:\n    //\n    //   http://www.3blue1brown.com/essence-of-linear-algebra-page/\n    //\n    // This isn't particularly efficient code, but hopefully\n    // it is readable.\n    const col1 = this.transformVector(m2.column(1));\n    const col2 = this.transformVector(m2.column(2));\n    const col3 = this.transformVector(m2.column(3));\n    const col4 = this.transformVector(m2.column(4));\n    return new Matrix3D([\n      [col1.x, col2.x, col3.x, col4.x],\n      [col1.y, col2.y, col3.y, col4.y],\n      [col1.z, col2.z, col3.z, col4.z],\n      [col1.w, col2.w, col3.w, col4.w],\n    ]);\n  }\n\n  /**\n   * Return the inverse of the matrix.\n   * \n   * If the matrix is non-invertible, an exception will\n   * be thrown.\n   */\n  inverse(): Matrix3D {\n    const inv = gluInvertMatrix(this.toFloat32Array());\n    if (inv === null) {\n      throw new Error('Matrix is non-invertible!');\n    }\n    return Matrix3D.fromFloat32Array(inv);\n  }\n\n  /**\n   * Apply the given function to every element of the matrix, returning\n   * a new one.\n   */\n  map(f: (value: number) => number): Matrix3D {\n    return new Matrix3D(this.values.map(row => row.map(f)) as Matrix3DTuple);\n  }\n\n  /**\n   * Multiply all elements of the matrix by the given constant,\n   * returning a new matrix.\n   */\n  multiplyByConstant(n: number): Matrix3D {\n    return this.map(value => value * n);\n  }\n\n  /**\n   * Create a matrix that transforms eye coordinates into clip\n   * coordinates.\n   * \n   * Note that clip coordinates will likely have a w-component\n   * that is not 1; the GPU will perform a perspective divide\n   * after the vertex shader to convert the clip coordinates\n   * into normalized device coordinates (NDC).\n   * \n   * Note also that the near and far parameters must be\n   * specified as positive numbers, as the clip coordinates\n   * use a left-handed coordinate system, while the\n   * eye coordinates use a right-handed coordinate system,\n   * and the projection matrix will convert between the\n   * two.\n   * \n   * For more details, as well as an excellent derivation\n   * of all the math behind all this, see:\n   * \n   *   http://www.songho.ca/opengl/gl_projectionmatrix.html#perspective\n   */\n  static perspectiveProjection(options: PerspectiveOptions): Matrix3D {\n    const { near, far, left, right, top, bottom } = options;\n    const width = right - left;\n    const height = top - bottom;\n    const depth = far - near;\n    const doubleNear = 2 * near;\n    return new Matrix3D([\n      [doubleNear / width, 0, (right + left) / width, 0],\n      [0, doubleNear / height, (top + bottom) / height, 0],\n      [0, 0, -(far + near) / depth, -2 * far * near / depth],\n      [0, 0, -1, 0]\n    ]);\n  }\n\n  transformVector(v: Vector3D): Vector3D {\n    const m = this.valueAt;\n    return new Vector3D(\n      m(1, 1) * v.x + m(1, 2) * v.y + m(1, 3) * v.z + m(1, 4) * v.w,\n      m(2, 1) * v.x + m(2, 2) * v.y + m(2, 3) * v.z + m(2, 4) * v.w,\n      m(3, 1) * v.x + m(3, 2) * v.y + m(3, 3) * v.z + m(3, 4) * v.w,\n      m(4, 1) * v.x + m(4, 2) * v.y + m(4, 3) * v.z + m(4, 4) * v.w,\n    );\n  }\n\n  column(col: Column): Vector3D {\n    const m = this.valueAt;\n    return new Vector3D(\n      m(1, col),\n      m(2, col),\n      m(3, col),\n      m(4, col)\n    );\n  }\n}\n","import { Points3D } from \"./points-3d\";\nimport { GlProgram, getAttribLocation, GlUniformMatrix3D } from \"./webgl\";\nimport { Points3DRenderer } from \"./points-3d-renderer\";\nimport { Matrix3D, Vector3D } from \"./matrix-3d\";\n\nconst simpleVertexShaderSrc = require(\"./simple-vertex-shader.glsl\") as string;\nconst zBufferFragmentShaderSrc = require(\"./z-buffer-fragment-shader.glsl\") as string;\n\nfunction makeSpaceship(): Points3D {\n  const leftHalf = Points3D.fromArray([\n    -0.5, 0, 0,\n    0, 0.75, 0,\n    0, 0.15, 0\n  ]);\n  return leftHalf.concat(leftHalf.mirrorHorizontally());\n}\n\nfunction makeGround(y = -1, pointsPerAxis = 20): Points3D {\n  const points: number[] = [];\n  let xPart = -1;\n  let zPart = -1;\n  let partInc = 1 / pointsPerAxis;\n  for (let i = 0; i <= pointsPerAxis; i++) {\n    points.push(xPart, y, zPart);\n    points.push(xPart, y, zPart + 2);\n    xPart += 2 * partInc;\n  }\n  xPart = -1;\n  for (let i = 0; i <= pointsPerAxis; i++) {\n    points.push(xPart, y, zPart);\n    points.push(xPart + 2, y, zPart);\n    zPart += 2 * partInc;\n  }\n  return Points3D.fromArray(points);\n}\n\nfunction makeRay(start: Vector3D, ray: Vector3D, segments = 10, length = 5): Points3D {\n  let point = start;\n  const increment = ray.normalize().times(length / segments);\n  const points: number[] = [];\n\n  for (let i = 0; i < segments; i++) {\n    points.push(point.x, point.y, point.z);\n    point = point.plus(increment);\n    points.push(point.x, point.y, point.z);\n  }\n\n  return Points3D.fromArray(points);\n}\n\nclass SimpleGlProgram extends GlProgram {\n  readonly transform: GlUniformMatrix3D;\n  readonly positionAttributeLocation: number;\n\n  constructor(gl: WebGLRenderingContext) {\n    super(gl, simpleVertexShaderSrc, zBufferFragmentShaderSrc);\n    this.transform = new GlUniformMatrix3D(this, 'u_transform');\n    this.positionAttributeLocation = getAttribLocation(gl, this.program, 'a_position');\n  }\n}\n\nclass Spaceship {\n  orbitTheta = Math.random();\n  orbitThetaVelocity = Math.random() * 0.01;\n  distanceFromCenter = Math.random();\n  scale = 0.5;\n  shipTheta = Math.random();\n  shipThetaVelocity = Math.random() * 0.05;\n\n  constructor(readonly z: number) {\n  }\n\n  update() {\n    this.orbitTheta += this.orbitThetaVelocity;\n    this.shipTheta += this.shipThetaVelocity;\n  }\n};\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  const canvas = document.createElement('canvas');\n\n  document.body.appendChild(canvas);\n  canvas.width = 800;\n  canvas.height = 800;\n  canvas.style.border = '1px solid black';\n\n  const gl = canvas.getContext('webgl');\n  if (!gl) throw new Error(\"webgl is not supported on this browser!\");\n\n  const program = new SimpleGlProgram(gl);\n  const spaceshipRenderer = new Points3DRenderer(program, makeSpaceship());\n  const groundRenderer = new Points3DRenderer(program, makeGround());\n  let rayRenderer: Points3DRenderer|null = null;\n  const baseProjectionTransform = Matrix3D.perspectiveProjection({\n    top: 1,\n    bottom: -1,\n    right: 1,\n    left: -1,\n    near: 1,\n    far: 3\n  });\n  const spaceships: Spaceship[] = [];\n  const NUM_SPACESHIPS = 30;\n  let screenClick: [number, number]|null = null;\n  let latestScreenClick: [number, number]|null = null;\n\n  for (let i = 0; i < NUM_SPACESHIPS; i++) {\n    spaceships.push(new Spaceship(-1 + ((i / NUM_SPACESHIPS) * 2)));\n  }\n\n  canvas.onclick = (e) => {\n    const x = -1 + (e.offsetX / canvas.width) * 2;\n    const y = (-1 + (e.offsetY / canvas.height) * 2) * -1;\n\n    screenClick = [x, y];\n  };\n\n  console.log(\"Initialization successful!\");\n\n  let cameraRotation = 0;\n\n  const render = () => {\n    const cameraTransform = new Matrix3D()\n      .rotateY(cameraRotation)\n      .translate(0, 0, 2.25);\n    const viewTransform = cameraTransform.inverse();\n    const projectionTransform = baseProjectionTransform.multiply(viewTransform);\n\n    if (screenClick && latestScreenClick !== screenClick) {\n      const inverseProjectionTransform = projectionTransform.inverse();\n      const screenPoint = new Vector3D(screenClick[0], screenClick[1], -1);\n      const screenPointInWorld = inverseProjectionTransform.transformVector(screenPoint).perspectiveDivide();\n      const cameraInWorld = cameraTransform.transformVector(new Vector3D(0, 0, 0));\n      const ray = screenPointInWorld.minus(cameraInWorld);\n\n      rayRenderer = new Points3DRenderer(program, makeRay(cameraInWorld, ray));\n      latestScreenClick = screenClick;\n    }\n\n    cameraRotation += 0.001;\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    gl.enable(gl.DEPTH_TEST);\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    program.activate();\n    if (rayRenderer) {\n      rayRenderer.setupForDrawing();\n      program.transform.set(projectionTransform);\n      rayRenderer.draw(gl.LINES);\n    }\n    groundRenderer.setupForDrawing();\n    program.transform.set(projectionTransform);\n    groundRenderer.draw(gl.LINES);\n    spaceshipRenderer.setupForDrawing();\n    spaceships.forEach(spaceship => {\n      const baseTransform = new Matrix3D()\n        .rotateZ(spaceship.orbitTheta)\n        .translate(spaceship.distanceFromCenter, 0, spaceship.z)\n        .scale(spaceship.scale)\n        .rotateY(spaceship.shipTheta);\n      program.transform.set(projectionTransform.multiply(baseTransform));\n      spaceshipRenderer.draw();\n      spaceship.update();\n    });\n    window.requestAnimationFrame(render);\n  };\n\n  render();\n});\n","import { Vector3D } from \"./matrix-3d\";\n\nexport class Points3D {\n  constructor(private readonly array: Vector3D[]) {\n  }\n\n  toFloat32Array(): Float32Array {\n    const { array } = this;\n    const result = new Float32Array(array.length * 3);\n    let arrIndex = 0;\n\n    for (let i = 0; i < result.length; i += 3) {\n      result[i] = array[arrIndex].x;\n      result[i + 1] = array[arrIndex].y;\n      result[i + 2] = array[arrIndex].z;\n      arrIndex += 1;\n    }\n\n    return result;\n  }\n\n  concat(points: Points3D): Points3D {\n    const combined = this.array.concat(points.array);\n    return new Points3D(combined);\n  }\n\n  mirrorHorizontally(): Points3D {\n    return new Points3D(this.array.map(point => {\n      return new Vector3D(-point.x, point.y, point.z);\n    }));\n  }\n\n  get length(): number {\n    return this.array.length;\n  }\n\n  static fromArray(array: number[]|Float32Array) {\n    const numPoints = array.length / 3;\n    const pointArray = new Array<Vector3D>(numPoints);\n    let arrIndex = 0;\n    for (let i = 0; i < numPoints; i++) {\n      const x = array[arrIndex];\n      const y = array[arrIndex + 1];\n      const z = array[arrIndex + 2];\n      pointArray[i] = new Vector3D(x, y, z);\n      arrIndex += 3;\n    }\n    return new Points3D(pointArray);\n  }\n}\n","/**\n * Invert the given 4x4 matrix.\n * \n * Returns the new matrix, or null if the matrix was non-invertible.\n * \n * Based on https://stackoverflow.com/a/1148405/2422398, which\n * in turn was taken from the MESA implementation of the GLU\n * library. (The code and function signature were modified from\n * the original C++ to make it more TypeScript-friendly.)\n */\nexport function gluInvertMatrix(m: Float32Array): Float32Array|null {\n  const inv = new Float32Array(16);\n\n  inv[0] = m[5]  * m[10] * m[15] - \n            m[5]  * m[11] * m[14] - \n            m[9]  * m[6]  * m[15] + \n            m[9]  * m[7]  * m[14] +\n            m[13] * m[6]  * m[11] - \n            m[13] * m[7]  * m[10];\n\n  inv[4] = -m[4]  * m[10] * m[15] + \n            m[4]  * m[11] * m[14] + \n            m[8]  * m[6]  * m[15] - \n            m[8]  * m[7]  * m[14] - \n            m[12] * m[6]  * m[11] + \n            m[12] * m[7]  * m[10];\n\n  inv[8] = m[4]  * m[9] * m[15] - \n            m[4]  * m[11] * m[13] - \n            m[8]  * m[5] * m[15] + \n            m[8]  * m[7] * m[13] + \n            m[12] * m[5] * m[11] - \n            m[12] * m[7] * m[9];\n\n  inv[12] = -m[4]  * m[9] * m[14] + \n              m[4]  * m[10] * m[13] +\n              m[8]  * m[5] * m[14] - \n              m[8]  * m[6] * m[13] - \n              m[12] * m[5] * m[10] + \n              m[12] * m[6] * m[9];\n\n  inv[1] = -m[1]  * m[10] * m[15] + \n            m[1]  * m[11] * m[14] + \n            m[9]  * m[2] * m[15] - \n            m[9]  * m[3] * m[14] - \n            m[13] * m[2] * m[11] + \n            m[13] * m[3] * m[10];\n\n  inv[5] = m[0]  * m[10] * m[15] - \n            m[0]  * m[11] * m[14] - \n            m[8]  * m[2] * m[15] + \n            m[8]  * m[3] * m[14] + \n            m[12] * m[2] * m[11] - \n            m[12] * m[3] * m[10];\n\n  inv[9] = -m[0]  * m[9] * m[15] + \n            m[0]  * m[11] * m[13] + \n            m[8]  * m[1] * m[15] - \n            m[8]  * m[3] * m[13] - \n            m[12] * m[1] * m[11] + \n            m[12] * m[3] * m[9];\n\n  inv[13] = m[0]  * m[9] * m[14] - \n            m[0]  * m[10] * m[13] - \n            m[8]  * m[1] * m[14] + \n            m[8]  * m[2] * m[13] + \n            m[12] * m[1] * m[10] - \n            m[12] * m[2] * m[9];\n\n  inv[2] = m[1]  * m[6] * m[15] - \n            m[1]  * m[7] * m[14] - \n            m[5]  * m[2] * m[15] + \n            m[5]  * m[3] * m[14] + \n            m[13] * m[2] * m[7] - \n            m[13] * m[3] * m[6];\n\n  inv[6] = -m[0]  * m[6] * m[15] + \n            m[0]  * m[7] * m[14] + \n            m[4]  * m[2] * m[15] - \n            m[4]  * m[3] * m[14] - \n            m[12] * m[2] * m[7] + \n            m[12] * m[3] * m[6];\n\n  inv[10] = m[0]  * m[5] * m[15] - \n            m[0]  * m[7] * m[13] - \n            m[4]  * m[1] * m[15] + \n            m[4]  * m[3] * m[13] + \n            m[12] * m[1] * m[7] - \n            m[12] * m[3] * m[5];\n\n  inv[14] = -m[0]  * m[5] * m[14] + \n              m[0]  * m[6] * m[13] + \n              m[4]  * m[1] * m[14] - \n              m[4]  * m[2] * m[13] - \n              m[12] * m[1] * m[6] + \n              m[12] * m[2] * m[5];\n\n  inv[3] = -m[1] * m[6] * m[11] + \n            m[1] * m[7] * m[10] + \n            m[5] * m[2] * m[11] - \n            m[5] * m[3] * m[10] - \n            m[9] * m[2] * m[7] + \n            m[9] * m[3] * m[6];\n\n  inv[7] = m[0] * m[6] * m[11] - \n            m[0] * m[7] * m[10] - \n            m[4] * m[2] * m[11] + \n            m[4] * m[3] * m[10] + \n            m[8] * m[2] * m[7] - \n            m[8] * m[3] * m[6];\n\n  inv[11] = -m[0] * m[5] * m[11] + \n              m[0] * m[7] * m[9] + \n              m[4] * m[1] * m[11] - \n              m[4] * m[3] * m[9] - \n              m[8] * m[1] * m[7] + \n              m[8] * m[3] * m[5];\n\n  inv[15] = m[0] * m[5] * m[10] - \n            m[0] * m[6] * m[9] - \n            m[4] * m[1] * m[10] + \n            m[4] * m[2] * m[9] + \n            m[8] * m[1] * m[6] - \n            m[8] * m[2] * m[5];\n\n  let det = m[0] * inv[0] + m[1] * inv[4] + m[2] * inv[8] + m[3] * inv[12];\n\n  if (det == 0)\n    return null;\n\n  det = 1.0 / det;\n\n  for (let i = 0; i < 16; i++)\n    inv[i] *= det;\n\n  return inv;\n}\n","import { Matrix3D } from \"./matrix-3d\";\n\nfunction createShader(gl: WebGLRenderingContext, type: number, source: string): WebGLShader {\n  const shader = gl.createShader(type);\n  if (!shader) throw new Error(\"gl.createShader() failed!\");\n\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n  if (!success) {\n    const msg = \"Compiling shader failed: \" + gl.getShaderInfoLog(shader);\n    gl.deleteShader(shader);\n    throw new Error(msg);\n  }\n\n  return shader;\n}\n\nfunction createProgram(gl: WebGLRenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader): WebGLProgram {\n  const program = gl.createProgram();\n  if (!program) throw new Error(\"gl.createProgram() failed!\");\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (!success) {\n    const msg = \"Linking program failed: \" + gl.getProgramInfoLog(program);\n    gl.deleteProgram(program);\n    throw new Error(msg);\n  }\n\n  return program;\n}\n\nfunction getUniformLocation(gl: WebGLRenderingContext, program: WebGLProgram, name: string): WebGLUniformLocation {\n  const loc = gl.getUniformLocation(program, name);\n\n  if (loc === null) {\n    throw new Error(`Unable to find uniform '${name}'!`);\n  }\n\n  return loc;\n}\n\nexport function getAttribLocation(gl: WebGLRenderingContext, program: WebGLProgram, name: string): number {\n  const loc = gl.getAttribLocation(program, name);\n\n  if (loc === -1) {\n    throw new Error(`Unable to find attribute '${name}'!`);\n  }\n\n  return loc;\n}\n\nexport class GlProgram {\n  readonly program: WebGLProgram;\n\n  constructor(readonly gl: WebGLRenderingContext, vertexShaderSrc: string, fragmentShaderSrc: string) {\n    const vertexShader = createShader(gl, WebGLRenderingContext.VERTEX_SHADER, vertexShaderSrc);\n    const fragmentShader = createShader(gl, WebGLRenderingContext.FRAGMENT_SHADER, fragmentShaderSrc);\n    this.program = createProgram(gl, vertexShader, fragmentShader);\n  }\n\n  activate() {\n    this.gl.useProgram(this.program);\n  }\n}\n\nclass GlUniformBase {\n  location: WebGLUniformLocation;\n\n  constructor(readonly program: GlProgram, name: string) {\n    this.location = getUniformLocation(program.gl, program.program, name);\n  }\n}\n\nexport class GlUniformVector extends GlUniformBase {\n  set(value: Float32List) {\n    this.program.gl.uniform4fv(this.location, value);\n  }\n}\n\nexport class GlUniformFloat extends GlUniformBase {\n  set(value: number) {\n    this.program.gl.uniform1f(this.location, value);\n  }\n}\n\nexport class GlUniformMatrix3D extends GlUniformBase {\n  set(value: Matrix3D) {\n    this.program.gl.uniformMatrix4fv(this.location, false, value.toFloat32Array());\n  }\n}\n","import { GlProgram } from \"./webgl\";\nimport { Points3D } from \"./points-3d\";\n\nexport interface Points3DRendererProgram extends GlProgram {\n  positionAttributeLocation: number;\n}\n\nexport class Points3DRenderer {\n  buffer: WebGLBuffer;\n\n  constructor(readonly program: Points3DRendererProgram, readonly points: Points3D) {\n    const { gl } = program;\n    const buffer = gl.createBuffer();\n\n    if (buffer === null) {\n      throw new Error(\"gl.createBuffer() failed!\");\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, points.toFloat32Array(), gl.STATIC_DRAW);\n\n    this.buffer = buffer;\n  }\n\n  setupForDrawing() {\n    const { gl, positionAttributeLocation } = this.program;\n\n    gl.enableVertexAttribArray(positionAttributeLocation);\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n\n    const vertexSize = 3;\n    const type = gl.FLOAT;\n    const normalize = false;\n    const stride = 0;\n    const offset = 0;\n    gl.vertexAttribPointer(positionAttributeLocation, vertexSize, type, normalize, stride, offset);\n  }\n\n  draw(primitiveType: number = WebGLRenderingContext.TRIANGLES) {\n    const { gl } = this.program;\n    const drawOffset = 0;\n    const count = this.points.length;\n    gl.drawArrays(primitiveType, drawOffset, count);  \n  }\n}\n","module.exports = \"attribute vec4 a_position;\\n\\nuniform mat4 u_transform;\\n\\nvoid main() {\\n  gl_Position = u_transform * a_position;\\n}\\n\";","module.exports = \"precision mediump float;\\n\\nvoid main() {\\n  // This essentially visualizes the z-buffer. Taken from:\\n  //\\n  //   https://learnopengl.com/Advanced-OpenGL/Depth-testing\\n  gl_FragColor = vec4(vec3(gl_FragCoord.z), 1.0);\\n}\\n\";"],"sourceRoot":""}